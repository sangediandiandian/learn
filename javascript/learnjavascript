1，如果变量未声明，在程序默认为全局变量。为了修补此错误，在第一行敲入代码：’use strict’; 未使用var声明变量变使用的，将导致运行错误。
2，转义字符 /
\n表示换行 \t表示制表符 
字符串’i`m “ok”’ 可表示为 ‘i/’m /”ok/”
\x##：十六进制表示 ‘\x41’ 等同于 ‘A’
\u####:表示一个Unicode字符:’\u4e2d\u6587’等同于’中文’
3，ES6模板字符串
var name = '小明';
var age = 20;
alert(`你好, ${name}, 你今年${age}岁了!`);
4，数组
1）数组长度 Array.length
	var arr = [1,2,3.14,’Hello’,null,true];
	arr.length;//6
	
	var arr = [1,2,3];
	arr.length;//3
	arr.length=6;
	arr;//arr 变为[1,2,3,undefined,undefined,undefined]
	arr.length=2;
	arr;//arr变为[1,2]

	var arr = [‘a’,’b’,’c’];
	arr[1]=99;
	arr;//arr变为[‘a’,99,’c’]

	var arr = [1,2,3];
	arr[5]=’x’;
	arr;//arr变为[1,2,3,undefined,undefined,’x’]
2）indexOf 搜索一个指定的元素的位置
	var arr=[10,20,’30’,’xyz’];
	arr.indexOf(10);//0
	arr.indexOf(20);//1
	arr.indexOf(30);//-1
3)slice 对应String 的substring()版本,它截取Array的部分元素，然后返回一个新的Array;
   	var arr = [1,2,3,4,5];
   	arr.slice(0,3);//从索引0开始到索引3结束,但不包括3:[1,2,3]
   	arr.slice(3);//从索引3开始到结束:[4,5]
	
	var arr = [1,2,3,4,5];
	var aCopy = arr.slice();
	aCopy;//[1,2,3,4,5]
	aCopy===arr;//false
4)push和pop push()向Array的末尾添加若干元素，pop()则把Aarray的最后一个元素删除掉；
	var arr  = [1,2];
	arr.push(‘a’,’b’);
	arr;//[1,2,’a’,’b’]
	arr.pop();//pop返回’b’
	arr;//返回[1,2,’a’]
	arr.pop(); arr.pop(); arr.pop(); // 连续pop 3次
arr; // []
arr.pop(); // 空数组继续pop不会报错，而是返回undefined
arr; // []
       5) unshift和shift, 如果要往Array的头部添加若干元素，使用unshift()方法，shift()方法则把Array的第一个元素删掉：
	var arr = [1, 2];
arr.unshift('A', 'B'); // 返回Array新的长度: 4
arr; // ['A', 'B', 1, 2]
arr.shift(); // 'A'
arr; // ['B', 1, 2]
arr.shift(); arr.shift(); arr.shift(); // 连续shift 3次
arr; // []
arr.shift(); // 空数组继续shift不会报错，而是返回undefined
arr; // []
     6) sort()可以对当前Array进行排序，它会直接修改当前Array的元素位置，直接调用时，按照默认顺序排序：
	var arr = ['B', 'C', 'A'];
arr.sort();
arr; // ['A', 'B', 'C']

7) reverse()把整个Array的元素给掉个个，也就是反转：
	var arr = ['one', 'two', 'three'];
arr.reverse(); 
arr; // ['three', 'two', 'one']
8) splice()方法是修改Array的“万能方法”，它可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素：
	var arr = ['Microsoft', 'Apple', 'Yahoo', 'AOL', 'Excite', 'Oracle'];
// 从索引2开始删除3个元素,然后再添加两个元素:
arr.splice(2, 3, 'Google', 'Facebook'); // 返回删除的元素 ['Yahoo', 'AOL', 'Excite']
arr; // ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']
// 只删除,不添加:
arr.splice(2, 2); // ['Google', 'Facebook']
arr; // ['Microsoft', 'Apple', 'Oracle']
// 只添加,不删除:
arr.splice(2, 0, 'Google', 'Facebook'); // 返回[],因为没有删除任何元素
arr; // ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']
     9) concat()方法把当前的Array和另一个Array连接起来，并返回一个新的Array：
	var arr = ['A', 'B', 'C'];
var added = arr.concat([1, 2, 3]);
added; // ['A', 'B', 'C', 1, 2, 3]
arr; // ['A', 'B', 'C']
10) join()方法是一个非常实用的方法，它把当前Array的每个元素都用指定的字符串连接起来，然后返回连接后的字符串：
	var arr = ['A', 'B', 'C', 1, 2, 3];
arr.join('-'); // 'A-B-C-1-2-3'
5，对象
1)	JavaScript的对象是动态类型，可以自由的给对象添加或删除属性。
var xiaoming ={
	name:’小明’
};
xiaoming.age;//undefined
xiaoming.age=18;//新增一个age属性
xiaoming.age;//18
delete xiaoming.age;//删除age属性
delete xiaoming['name']; // 删除name属性
xiaoming.name; // undefined
delete xiaoming.school; // 删除一个不存在的school属性也不会报错

2）如果要判断对象是否存在某个属性可以用in
var xiaoming ={
	name:’小明’,
	age:’18’
};
‘name’ in xiaoming;//true
‘id’ in xiaoming;//flase
In也可以继承来自父类的方法，如果判断子类中是否存在某个方法可用hasOwnProperty（）
6，条件判断
	If(){}else{}
7，循环
	for(var  i=0;i<10;i++){
		i;
}
8，map和set
	var m = new Map([[‘A’,1],[‘B’,2],[‘c’,3]]);
	m.get(‘A’);
	var m = new Map(); // 空Map
m.set('Adam', 67); // 添加新的key-value
m.set('Bob', 59);
m.has('Adam'); // 是否存在key 'Adam': true
m.get('Adam'); // 67
m.delete('Adam'); // 删除key 'Adam'
m.get('Adam'); // undefined

Set和Map类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在Set中，没有重复的key

var s = new Set([1, 2, 3, 3, '3']);
s; // Set {1, 2, 3, "3"}

>>> s.add(4)
>>> s
{1, 2, 3, 4}
>>> s.add(4)
>>> s
{1, 2, 3, 4}

var s = new Set([1, 2, 3]);
s; // Set {1, 2, 3}
s.delete(3);
s; // Set {1, 2}
9，iterable
	var a = ['A', 'B', 'C'];
var s = new Set(['A', 'B', 'C']);
var m = new Map([[1, 'x'], [2, 'y'], [3, 'z']]);
for (var x of a) { // 遍历Array
    alert(x);
}
for (var x of s) { // 遍历Set
    alert(x);
}
for (var x of m) { // 遍历Map
    alert(x[0] + '=' + x[1]);
}

var a = ['A', 'B', 'C'];
a.forEach(function (element, index, array) {
    // element: 指向当前元素的值
    // index: 指向当前索引
    // array: 指向Array对象本身
    alert(element);
});

var s = new Set(['A', 'B', 'C']);
s.forEach(function (element, sameElement, set) {
    alert(element);
});

var m = new Map([[1, 'x'], [2, 'y'], [3, 'z']]);
m.forEach(function (value, key, map) {
    alert(value);
});


var a = ['A', 'B', 'C'];
a.forEach(function (element) {
    alert(element);
});

10,高阶函数
一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数


function add(x, y, f) {
    return f(x) + f(y);
}

	1）map
	function pow(x) {
    	return x * x;
}

var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];
arr.map(pow); // [1, 4, 9, 16, 25, 36, 49, 64, 81]
map()传入的参数是pow，即函数对象本身。
2）reduce
再看reduce的用法。Array的reduce()把一个函数作用在这个Array的[x1, x2, x3...]上，这个函数必须接收两个参数，reduce()把结果继续和序列的下一个元素做累积计算，其效果就是：

[x1, x2, x3, x4].reduce(f) = f(f(f(x1, x2), x3), x4)
比方说对一个Array求和，就可以用reduce实现：

var arr = [1, 3, 5, 7, 9];
arr.reduce(function (x, y) {
    return x + y;
}); // 25
3）filter
filter也是一个常用的操作，它用于把Array的某些元素过滤掉，然后返回剩下的元素。

和map()类似，Array的filter()也接收一个函数。和map()不同的是，filter()把传入的函数依次作用于每个元素，然后根据返回值是true还是false决定保留还是丢弃该元素。

例如，在一个Array中，删掉偶数，只保留奇数，可以这么写：

var arr = [1, 2, 4, 5, 6, 9, 10, 15];
var r = arr.filter(function (x) {
    return x % 2 !== 0;
});
r; // [1, 5, 9, 15]
11，闭包
高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回
12，箭头函数
x => x * x
等同于
function (x) {
    return x * x;
}
13，this
this总是指向词法作用域，也就是外层调用者obj
14，generator
generator和函数不同的是，generator由function*定义（注意多出的*号），并且，除了return语句，还可以用yield返回多次。
15，标准对象
不要使用new Number()、new Boolean()、new String()创建包装对象；
用parseInt()或parseFloat()来转换任意类型到number；
用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；
通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；
typeof操作符可以判断出number、boolean、string、function和undefined；
判断Array要使用Array.isArray(arr)；
判断null请使用myVar === null；
判断某个全局变量是否存在用typeof window.myVar === 'undefined'；
函数内部判断某个变量是否存在用typeof myVar === 'undefined'
16，Date
var now = new Date();
now; // Wed Jun 24 2015 19:49:22 GMT+0800 (CST)
now.getFullYear(); // 2015, 年份
now.getMonth(); // 5, 月份，注意月份范围是0~11，5表示六月
now.getDate(); // 24, 表示24号
now.getDay(); // 3, 表示星期三
now.getHours(); // 19, 24小时制
now.getMinutes(); // 49, 分钟
now.getSeconds(); // 22, 秒
now.getMilliseconds(); // 875, 毫秒数
now.getTime(); // 1435146562875, 以number形式表示的时间戳
17，RegExp
用\d可以匹配一个数字，\w可以匹配一个字母或数字,用*表示任意个字符（包括0个），用+表示至少一个字符，用?表示0个或1个字符，用{n}表示n个字符，用{n,m}表示n-m个字符
\d{3}\s+\d{3,8}。
我们来从左到右解读一下：
\d{3}表示匹配3个数字，例如'010'；
\s可以匹配一个空格（也包括Tab等空白符），所以\s+表示至少有一个空格，例如匹配' '，'\t\t'等；
\d{3,8}表示3-8个数字，例如'1234567'
如果正则表达式中定义了组，就可以在RegExp对象上用exec()方法提取出子串来。
exec()方法在匹配成功后，会返回一个Array，第一个元素是正则表达式匹配到的整个字符串，后面的字符串表示匹配成功的子串。
exec()方法在匹配失败时返回null。
17，操作DOM
18，AJAX
AJAX不是JavaScript的规范，它只是一个哥们“发明”的缩写：Asynchronous JavaScript and XML，意思就是用JavaScript执行异步网络请求
19，Promise
可见Promise最大的好处是在异步执行的流程中，把执行代码和处理结果的代码清晰地分离了。Promise还可以做更多的事情，比如，有若干个异步任务，需要先做任务1，如果成功后再做任务2，任何任务失败则不再继续并执行错误处理函数。
要串行执行这样的异步任务，不用Promise需要写一层一层的嵌套代码。有了Promise，我们只需要简单地写：
job1.then(job2).then(job3).catch(handleError);
其中，job1、job2和job3都是Promise对象。
20，Canvas
Canvas是HTML5新增的组件，它就像一块幕布，可以用JavaScript在上面绘制各种图表、动画等
21，jQuery
1）消除浏览器差异：你不需要自己写冗长的代码来针对不同的浏览器来绑定事件，编写AJAX等代码；
	2）简洁的操作DOM的方法：写$('#test')肯定比document.getElementById('test')来得简洁；
3）轻松实现动画、修改CSS等各种操作。
22，jQuery 层级选择器
23，错误处理

